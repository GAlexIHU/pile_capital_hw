/**
 * @type {import('eslint').Linter.Config}
 */
module.exports = {
  env: {
    es6: true,
    browser: true,
    node: true,
    jest: true,
  },
  globals: {
    React: "readonly",
  },
  settings: {
    "import/resolver": {
      alias: {
        extensions: [".js", ".jsx"],
        map: [["@/", "."]],
      },
    },
  },
  extends: [
    "next",
    "turbo",
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:jsonc/recommended-with-jsonc",
    "prettier",
    "plugin:prettier/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    // "plugin:@typescript-eslint/recommended-requiring-type-checking", // more info here: https://typescript-eslint.io/linting/configs/#recommended-type-checked
    "plugin:jest/recommended",
    "plugin:testing-library/react",
    "plugin:eslint-comments/recommended",
    "plugin:jest-formatting/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    sourceType: "module",
    ecmaFeatures: { jsx: true },
  },
  plugins: [
    "@typescript-eslint",
    "simple-import-sort",
    "prettier",
    "jest-formatting",
  ],
  rules: {
    "no-console": "error",
    complexity: ["error", 10],
    "prefer-object-spread": "error",
    "prefer-const": ["error", { destructuring: "all" }],
    "prefer-template": "error",
    "func-names": ["error", "as-needed"],
    "max-nested-callbacks": ["warn", 3],
    "one-var-declaration-per-line": "error",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-label-var": "error",
    "no-await-in-loop": "error",
    "no-underscore-dangle": "off",
    "no-undef-init": "error",
    "no-eq-null": "error",
    yoda: ["error", "never"],
    eqeqeq: "error",
    "arrow-body-style": ["warn", "as-needed"],
    radix: ["warn", "always"],
    curly: ["error", "all"],
    "prefer-destructuring": [
      "warn",
      {
        // `array` is disabled because it forces destructuring on
        // stupid stuff like `foo.bar = process.argv[2];`
        VariableDeclarator: {
          array: false,
          object: true,
        },
        AssignmentExpression: {
          array: false,
          // Disabled because object assignment destructuring requires parens wrapping:
          // `let foo; ({foo} = object);`
          object: false,
        },
      },
      { enforceForRenamedProperties: false },
    ],
    "padding-line-between-statements": [
      "error",
      { blankLine: "always", prev: "directive", next: "*" },
      { blankLine: "any", prev: "directive", next: "directive" },
      { blankLine: "always", prev: ["default"], next: "*" },
      {
        blankLine: "always",
        prev: "*",
        next: [
          "try",
          "return",
          "if",
          "switch",
          "throw",
          "while",
          "for",
          "export",
          "do",
          "continue",
          "class",
          "break",
        ],
      },
      { blankLine: "any", prev: "export", next: "export" },
    ],
    "prefer-arrow-callback": ["error", { allowNamedFunctions: true }],
    "prefer-numeric-literals": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "symbol-description": "error",
    "spaced-comment": ["error", "always"],
    "guard-for-in": "error",
    "no-duplicate-imports": "error",
    "no-alert": "error",
    "no-useless-call": "error",
    "no-useless-return": "error",
    "no-useless-concat": "error",
    "no-eval": "error",
    "no-floating-decimal": "error",
    "default-case": "error",
    "default-case-last": "error",
    "no-multi-spaces": "error",
    "no-script-url": "error",
    "no-return-assign": "error",
    "no-return-await": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-unused-expressions": "error",
    "max-statements-per-line": "error",
    "max-params": ["warn", { max: 6 }],
    "dot-location": ["error", "property"],
    "no-extra-bind": "error",
    "no-unneeded-ternary": "error",
    "no-multi-assign": "error",
    "no-lonely-if": "error",
    "no-else-return": "error",
    "max-len": "off",
    "object-shorthand": ["error", "properties"],
    "turbo/no-undeclared-env-vars": "off",
    "@next/next/no-html-link-for-pages": "off",
    "react/display-name": "off",
    "react/jsx-uses-react": "off",
    "react/self-closing-comp": "error",
    "react/jsx-boolean-value": ["error", "never"],
    "react-hooks/rules-of-hooks": "warn",
    "prettier/prettier": "error",
    "simple-import-sort/imports": [
      "error",
      {
        groups: [["^\\u0000", "^@?\\w", "^[^.]", "^\\."]],
      },
    ],
    "simple-import-sort/exports": "error",
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
    "@typescript-eslint/no-dupe-class-members": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-type-arguments": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/default-param-last": "error",
    "@typescript-eslint/type-annotation-spacing": "error",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/prefer-includes": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "testing-library/no-await-sync-events": "error",
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        assertionStyle: "as",
        objectLiteralTypeAssertions: "allow-as-parameter",
      },
    ],
    "@typescript-eslint/no-throw-literal": [
      "error",
      {
        // This should ideally be `false`, but it makes rethrowing errors inconvenient. There should be a separate `allowRethrowingUnknown` option.
        allowThrowingUnknown: true,
        allowThrowingAny: false,
      },
    ],
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": { descriptionFormat: "^ -- .+$" },
        "ts-ignore": { descriptionFormat: "^ -- .+$" },
        "ts-nocheck": { descriptionFormat: "^ -- .+$" },
        "ts-check": false,
      },
    ],
    "eslint-comments/require-description": "error",
    "eslint-comments/disable-enable-pair": ["error", { allowWholeFile: true }],
    "jest/max-nested-describe": ["error", { max: 4 }],
    "jest/prefer-each": "warn",
    "jest-formatting/padding-around-expect-groups": "error",
  },
};
